{
    "title":"how to code in c",
    "description":"C is probably the most widely known programming language. It is used as the reference language for computer science courses all over the world, and it's probably the language that people learn the most in school along with Python and Java. I remember it being my second programming language ever, after Pascal. C is not just what students use to learn programming. It's not an academic language. And I would say it's not the easiest language, because C is a rather low level programming language. Today, C is widely used in embedded devices, and it powers most of the Internet servers, which are built using Linux. The Linux kernel is built using C, and this also means that C powers the core of all Android devices. We can say that C code runs a good portion of the entire world. Right now. Pretty remarkable. When it was created, C was considered a high level language, because it was portable across machines. Today we kind of take for granted that we can run a program written on a Mac on Windows or Linux, perhaps using Node.js or Python. Once upon a time, this was not the case at all. What C brought to the table was a language that was simple to implement and that had a compiler that could be easily ported to different machines. I said compiler: C is a compiled programming language, like Go, Java, Swift or Rust. Other popular programming language like Python, Ruby or JavaScript are interpreted. The difference is consistent: a compiled language generates a binary file that can be directly executed and distributed. C is not garbage collected. This means we have to manage memory ourselves. It's a complex task and one that requires a lot of attention to prevent bugs, but it is also what makes C ideal to write programs for embedded devices like Arduino. C does not hide the complexity and the capabilities of the machine underneath. You have a lot of power, once you know what you can do. I want to introduce the first C program now, which we'll call Let's describe the program source code: we first import the stdio library (the name stands for standard input-output library). This library gives us access to input/output functions. C is a very small language at its core, and anything that's not part of the core is provided by libraries. Some of those libraries are built by normal programmers, and made available for others to use. Some other libraries are built into the compiler. Like stdio and others. stdio is the library that provides the printf() function. This function is wrapped into a main() function. The main() function is the entry point of any C program. But what is a function, anyway? A function is a routine that takes one or more arguments, and returns a single value. In the case of main(), the function gets no arguments, and returns an integer. We identify that using the void keyword for the argument, and the int keyword for the return value. The function has a body, which is wrapped in curly braces. Inside the body we have all the code that the function needs to perform its operations. The printf() function is written differently, as you can see. It has no return value defined, and we pass a string, wrapped in double quotes. We didn't specify the type of the argument. That's because this is a function invocation. Somewhere, inside the stdio library, printf is defined as. Most of the time, you'll likely use an int to store an integer. But in some cases, you might want to choose one of the other 3 options. The char type is commonly used to store letters of the ASCII chart, but it can be used to hold small integers from -128 to 127. It takes at least 1 byte. int takes at least 2 bytes. short takes at least 2 bytes. long takes at least 4 bytes. As you can see, we are not guaranteed the same values for different environments. We only have an indication. The problem is that the exact numbers that can be stored in each data type depends on the implementation and the architecture. We're guaranteed that short is not longer than int. And we're guaranteed long is not shorter than int. The ANSI C spec standard determines the minimum values of each type, and thanks to it we can at least know what's the minimum value we can expect to have at our disposal. If you are programming C on an Arduino, different board will have different limits. On an Arduino Uno board, int stores a 2 byte value, ranging from -32,768 to 32,767. On a Arduino MKR 1010, int stores a 4 bytes value, ranging from -2,147,483,648 to 2,147,483,647. Quite a big difference. On all Arduino boards, short stores a 2 bytes value, ranging from -32,768 to 32,767. long store 4 bytes, ranging from -2,147,483,648 to 2,147,483,647.",
    "author":"Priyam Srivastava",
    "date":"2020-01-01",
    "tags":["c","programming","computer science"],
    "slug":"how-to-code-in-c"
}